(()=>{var t={3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},1530:(t,e,r)=>{"use strict";var n=r(8710).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},5787:t=>{t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},9670:(t,e,r)=>{var n=r(111);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},1318:(t,e,r)=>{var n=r(5656),o=r(7466),i=r(1400),c=function(t){return function(e,r,c){var a,u=n(e),s=o(u.length),f=i(c,s);if(t&&r!=r){for(;s>f;)if((a=u[f++])!=a)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},1194:(t,e,r)=>{var n=r(7293),o=r(5112),i=r(7392),c=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[c]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},7072:(t,e,r)=>{var n=r(5112)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[n]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,r)=>{var n=r(1694),o=r(4326),i=r(5112)("toStringTag"),c="Arguments"==o(function(){return arguments}());t.exports=n?o:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:c?o(e):"Object"==(n=o(e))&&"function"==typeof e.callee?"Arguments":n}},9920:(t,e,r)=>{var n=r(6656),o=r(3887),i=r(1236),c=r(3070);t.exports=function(t,e){for(var r=o(e),a=c.f,u=i.f,s=0;s<r.length;s++){var f=r[s];n(t,f)||a(t,f,u(e,f))}}},4964:(t,e,r)=>{var n=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},8880:(t,e,r)=>{var n=r(9781),o=r(3070),i=r(9114);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,r)=>{"use strict";var n=r(7593),o=r(3070),i=r(9114);t.exports=function(t,e,r){var c=n(e);c in t?o.f(t,c,i(0,r)):t[c]=r}},9781:(t,e,r)=>{var n=r(7293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,r)=>{var n=r(7854),o=r(111),i=n.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},6833:(t,e,r)=>{var n=r(8113);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(n)},5268:(t,e,r)=>{var n=r(4326),o=r(7854);t.exports="process"==n(o.process)},1036:(t,e,r)=>{var n=r(8113);t.exports=/web0s(?!.*chrome)/i.test(n)},8113:(t,e,r)=>{var n=r(5005);t.exports=n("navigator","userAgent")||""},7392:(t,e,r)=>{var n,o,i=r(7854),c=r(8113),a=i.process,u=a&&a.versions,s=u&&u.v8;s?o=(n=s.split("."))[0]+n[1]:c&&(!(n=c.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=c.match(/Chrome\/(\d+)/))&&(o=n[1]),t.exports=o&&+o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,r)=>{var n=r(7854),o=r(1236).f,i=r(8880),c=r(1320),a=r(3505),u=r(9920),s=r(4705);t.exports=function(t,e){var r,f,l,p,v,h=t.target,d=t.global,g=t.stat;if(r=d?n:g?n[h]||a(h,{}):(n[h]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(v=o(r,f))&&v.value:r[f],!s(d?f:h+(g?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(r,f,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,r)=>{"use strict";r(4916);var n=r(1320),o=r(7293),i=r(5112),c=r(8880),a=i("species"),u=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),s="$0"==="a".replace(/./,"$0"),f=i("replace"),l=!!/./[f]&&""===/./[f]("a","$0"),p=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,f){var v=i(t),h=!o((function(){var e={};return e[v]=function(){return 7},7!=""[t](e)})),d=h&&!o((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[a]=function(){return r},r.flags="",r[v]=/./[v]),r.exec=function(){return e=!0,null},r[v](""),!e}));if(!h||!d||"replace"===t&&(!u||!s||l)||"split"===t&&!p){var g=/./[v],x=r(v,""[t],(function(t,e,r,n,o){return e.exec===RegExp.prototype.exec?h&&!o?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:s,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:l}),y=x[0],m=x[1];n(String.prototype,t,y),n(RegExp.prototype,v,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}f&&c(RegExp.prototype[v],"sham",!0)}},9974:(t,e,r)=>{var n=r(3099);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},5005:(t,e,r)=>{var n=r(857),o=r(7854),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},1246:(t,e,r)=>{var n=r(648),o=r(7497),i=r(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},7854:(t,e,r)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},3501:t=>{t.exports={}},842:(t,e,r)=>{var n=r(7854);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},490:(t,e,r)=>{var n=r(5005);t.exports=n("document","documentElement")},4664:(t,e,r)=>{var n=r(9781),o=r(7293),i=r(317);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,e,r)=>{var n=r(7293),o=r(4326),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},2788:(t,e,r)=>{var n=r(5465),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},9909:(t,e,r)=>{var n,o,i,c=r(8536),a=r(7854),u=r(111),s=r(8880),f=r(6656),l=r(5465),p=r(6200),v=r(3501),h=a.WeakMap;if(c){var d=l.state||(l.state=new h),g=d.get,x=d.has,y=d.set;n=function(t,e){return e.facade=t,y.call(d,t,e),e},o=function(t){return g.call(d,t)||{}},i=function(t){return x.call(d,t)}}else{var m=p("state");v[m]=!0,n=function(t,e){return e.facade=t,s(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},7659:(t,e,r)=>{var n=r(5112),o=r(7497),i=n("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},3157:(t,e,r)=>{var n=r(4326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4705:(t,e,r)=>{var n=r(7293),o=/#|\.prototype\./,i=function(t,e){var r=a[c(t)];return r==s||r!=u&&("function"==typeof e?n(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},a=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,e,r)=>{var n=r(111),o=r(4326),i=r(5112)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},408:(t,e,r)=>{var n=r(9670),o=r(7659),i=r(7466),c=r(9974),a=r(1246),u=r(9212),s=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var f,l,p,v,h,d,g,x=r&&r.that,y=!(!r||!r.AS_ENTRIES),m=!(!r||!r.IS_ITERATOR),b=!(!r||!r.INTERRUPTED),E=c(e,x,1+y+b),w=function(t){return f&&u(f),new s(!0,t)},S=function(t){return y?(n(t),b?E(t[0],t[1],w):E(t[0],t[1])):b?E(t,w):E(t)};if(m)f=t;else{if("function"!=typeof(l=a(t)))throw TypeError("Target is not iterable");if(o(l)){for(p=0,v=i(t.length);v>p;p++)if((h=S(t[p]))&&h instanceof s)return h;return new s(!1)}f=l.call(t)}for(d=f.next;!(g=d.call(f)).done;){try{h=S(g.value)}catch(t){throw u(f),t}if("object"==typeof h&&h&&h instanceof s)return h}return new s(!1)}},9212:(t,e,r)=>{var n=r(9670);t.exports=function(t){var e=t.return;if(void 0!==e)return n(e.call(t)).value}},7497:t=>{t.exports={}},5948:(t,e,r)=>{var n,o,i,c,a,u,s,f,l=r(7854),p=r(1236).f,v=r(261).set,h=r(6833),d=r(1036),g=r(5268),x=l.MutationObserver||l.WebKitMutationObserver,y=l.document,m=l.process,b=l.Promise,E=p(l,"queueMicrotask"),w=E&&E.value;w||(n=function(){var t,e;for(g&&(t=m.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},h||g||d||!x||!y?b&&b.resolve?(s=b.resolve(void 0),f=s.then,c=function(){f.call(s,n)}):c=g?function(){m.nextTick(n)}:function(){v.call(l,n)}:(a=!0,u=y.createTextNode(""),new x(n).observe(u,{characterData:!0}),c=function(){u.data=a=!a})),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,c()),i=e}},3366:(t,e,r)=>{var n=r(7854);t.exports=n.Promise},133:(t,e,r)=>{var n=r(5268),o=r(7392),i=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(n?38===o:o>37&&o<41)}))},8536:(t,e,r)=>{var n=r(7854),o=r(2788),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},8523:(t,e,r)=>{"use strict";var n=r(3099),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},3929:(t,e,r)=>{var n=r(7850);t.exports=function(t){if(n(t))throw TypeError("The method doesn't accept regular expressions");return t}},3070:(t,e,r)=>{var n=r(9781),o=r(4664),i=r(9670),c=r(7593),a=Object.defineProperty;e.f=n?a:function(t,e,r){if(i(t),e=c(e,!0),i(r),o)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},1236:(t,e,r)=>{var n=r(9781),o=r(5296),i=r(9114),c=r(5656),a=r(7593),u=r(6656),s=r(4664),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=c(t),e=a(e,!0),s)try{return f(t,e)}catch(t){}if(u(t,e))return i(!o.f.call(t,e),t[e])}},8006:(t,e,r)=>{var n=r(6324),o=r(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},6324:(t,e,r)=>{var n=r(6656),o=r(5656),i=r(1318).indexOf,c=r(3501);t.exports=function(t,e){var r,a=o(t),u=0,s=[];for(r in a)!n(c,r)&&n(a,r)&&s.push(r);for(;e.length>u;)n(a,r=e[u++])&&(~i(s,r)||s.push(r));return s}},5296:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},288:(t,e,r)=>{"use strict";var n=r(1694),o=r(648);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},3887:(t,e,r)=>{var n=r(5005),o=r(8006),i=r(5181),c=r(9670);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(c(t)),r=i.f;return r?e.concat(r(t)):e}},857:(t,e,r)=>{var n=r(7854);t.exports=n},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,r)=>{var n=r(9670),o=r(111),i=r(8523);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},2248:(t,e,r)=>{var n=r(1320);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},1320:(t,e,r)=>{var n=r(7854),o=r(8880),i=r(6656),c=r(3505),a=r(2788),u=r(9909),s=u.get,f=u.enforce,l=String(String).split("String");(t.exports=function(t,e,r,a){var u,s=!!a&&!!a.unsafe,p=!!a&&!!a.enumerable,v=!!a&&!!a.noTargetGet;"function"==typeof r&&("string"!=typeof e||i(r,"name")||o(r,"name",e),(u=f(r)).source||(u.source=l.join("string"==typeof e?e:""))),t!==n?(s?!v&&t[e]&&(p=!0):delete t[e],p?t[e]=r:o(t,e,r)):p?t[e]=r:c(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},7651:(t,e,r)=>{var n=r(4326),o=r(2261);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var i=r.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},2261:(t,e,r)=>{"use strict";var n,o,i=r(7066),c=r(2999),a=r(2309),u=RegExp.prototype.exec,s=a("native-string-replace",String.prototype.replace),f=u,l=(n=/a/,o=/b*/g,u.call(n,"a"),u.call(o,"a"),0!==n.lastIndex||0!==o.lastIndex),p=c.UNSUPPORTED_Y||c.BROKEN_CARET,v=void 0!==/()??/.exec("")[1];(l||v||p)&&(f=function(t){var e,r,n,o,c=this,a=p&&c.sticky,f=i.call(c),h=c.source,d=0,g=t;return a&&(-1===(f=f.replace("y","")).indexOf("g")&&(f+="g"),g=String(t).slice(c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&"\n"!==t[c.lastIndex-1])&&(h="(?: "+h+")",g=" "+g,d++),r=new RegExp("^(?:"+h+")",f)),v&&(r=new RegExp("^"+h+"$(?!\\s)",f)),l&&(e=c.lastIndex),n=u.call(a?r:c,g),a?n?(n.input=n.input.slice(d),n[0]=n[0].slice(d),n.index=c.lastIndex,c.lastIndex+=n[0].length):c.lastIndex=0:l&&n&&(c.lastIndex=c.global?n.index+n[0].length:e),v&&n&&n.length>1&&s.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),t.exports=f},7066:(t,e,r)=>{"use strict";var n=r(9670);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,r)=>{"use strict";var n=r(7293);function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,e,r)=>{var n=r(7854),o=r(8880);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},6340:(t,e,r)=>{"use strict";var n=r(5005),o=r(3070),i=r(5112),c=r(9781),a=i("species");t.exports=function(t){var e=n(t),r=o.f;c&&e&&!e[a]&&r(e,a,{configurable:!0,get:function(){return this}})}},8003:(t,e,r)=>{var n=r(3070).f,o=r(6656),i=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},6200:(t,e,r)=>{var n=r(2309),o=r(9711),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,e,r)=>{var n=r(7854),o=r(3505),i="__core-js_shared__",c=n[i]||o(i,{});t.exports=c},2309:(t,e,r)=>{var n=r(1913),o=r(5465);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.10.1",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,r)=>{var n=r(9670),o=r(3099),i=r(5112)("species");t.exports=function(t,e){var r,c=n(t).constructor;return void 0===c||null==(r=n(c)[i])?e:o(r)}},8710:(t,e,r)=>{var n=r(9958),o=r(4488),i=function(t){return function(e,r){var i,c,a=String(o(e)),u=n(r),s=a.length;return u<0||u>=s?t?"":void 0:(i=a.charCodeAt(u))<55296||i>56319||u+1===s||(c=a.charCodeAt(u+1))<56320||c>57343?t?a.charAt(u):i:t?a.slice(u,u+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},261:(t,e,r)=>{var n,o,i,c=r(7854),a=r(7293),u=r(9974),s=r(490),f=r(317),l=r(6833),p=r(5268),v=c.location,h=c.setImmediate,d=c.clearImmediate,g=c.process,x=c.MessageChannel,y=c.Dispatch,m=0,b={},E=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){E(t)}},S=function(t){E(t.data)},j=function(t){c.postMessage(t+"",v.protocol+"//"+v.host)};h&&d||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(m),m},d=function(t){delete b[t]},p?n=function(t){g.nextTick(w(t))}:y&&y.now?n=function(t){y.now(w(t))}:x&&!l?(i=(o=new x).port2,o.port1.onmessage=S,n=u(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts&&v&&"file:"!==v.protocol&&!a(j)?(n=j,c.addEventListener("message",S,!1)):n="onreadystatechange"in f("script")?function(t){s.appendChild(f("script")).onreadystatechange=function(){s.removeChild(this),E(t)}}:function(t){setTimeout(w(t),0)}),t.exports={set:h,clear:d}},1400:(t,e,r)=>{var n=r(9958),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},5656:(t,e,r)=>{var n=r(8361),o=r(4488);t.exports=function(t){return n(o(t))}},9958:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},7466:(t,e,r)=>{var n=r(9958),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},7593:(t,e,r)=>{var n=r(111);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},1694:(t,e,r)=>{var n={};n[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},9711:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},3307:(t,e,r)=>{var n=r(133);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(t,e,r)=>{var n=r(7854),o=r(2309),i=r(6656),c=r(9711),a=r(133),u=r(3307),s=o("wks"),f=n.Symbol,l=u?f:f&&f.withoutSetter||c;t.exports=function(t){return i(s,t)&&(a||"string"==typeof s[t])||(a&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},7042:(t,e,r)=>{"use strict";var n=r(2109),o=r(111),i=r(3157),c=r(1400),a=r(7466),u=r(5656),s=r(6135),f=r(5112),l=r(1194)("slice"),p=f("species"),v=[].slice,h=Math.max;n({target:"Array",proto:!0,forced:!l},{slice:function(t,e){var r,n,f,l=u(this),d=a(l.length),g=c(t,d),x=c(void 0===e?d:e,d);if(i(l)&&("function"!=typeof(r=l.constructor)||r!==Array&&!i(r.prototype)?o(r)&&null===(r=r[p])&&(r=void 0):r=void 0,r===Array||void 0===r))return v.call(l,g,x);for(n=new(void 0===r?Array:r)(h(x-g,0)),f=0;g<x;g++,f++)g in l&&s(n,f,l[g]);return n.length=f,n}})},1539:(t,e,r)=>{var n=r(1694),o=r(1320),i=r(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},8674:(t,e,r)=>{"use strict";var n,o,i,c,a=r(2109),u=r(1913),s=r(7854),f=r(5005),l=r(3366),p=r(1320),v=r(2248),h=r(8003),d=r(6340),g=r(111),x=r(3099),y=r(5787),m=r(2788),b=r(408),E=r(7072),w=r(6707),S=r(261).set,j=r(5948),T=r(9478),O=r(842),P=r(8523),R=r(2534),A=r(9909),I=r(4705),_=r(5112),M=r(5268),k=r(7392),C=_("species"),N="Promise",q=A.get,L=A.set,U=A.getterFor(N),W=l,D=s.TypeError,F=s.document,$=s.process,z=f("fetch"),B=P.f,K=B,G=!!(F&&F.createEvent&&s.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,H="unhandledrejection",V=I(N,(function(){if(m(W)===String(W)){if(66===k)return!0;if(!M&&!Y)return!0}if(u&&!W.prototype.finally)return!0;if(k>=51&&/native code/.test(W))return!1;var t=W.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[C]=e,!(t.then((function(){}))instanceof e)})),X=V||!E((function(t){W.all(t).catch((function(){}))})),J=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},Q=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;j((function(){for(var n=t.value,o=1==t.state,i=0;r.length>i;){var c,a,u,s=r[i++],f=o?s.ok:s.fail,l=s.resolve,p=s.reject,v=s.domain;try{f?(o||(2===t.rejection&&rt(t),t.rejection=1),!0===f?c=n:(v&&v.enter(),c=f(n),v&&(v.exit(),u=!0)),c===s.promise?p(D("Promise-chain cycle")):(a=J(c))?a.call(c,l,p):l(c)):p(n)}catch(t){v&&!u&&v.exit(),p(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&tt(t)}))}},Z=function(t,e,r){var n,o;G?((n=F.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},!Y&&(o=s["on"+t])?o(n):t===H&&O("Unhandled promise rejection",r)},tt=function(t){S.call(s,(function(){var e,r=t.facade,n=t.value;if(et(t)&&(e=R((function(){M?$.emit("unhandledRejection",n,r):Z(H,r,n)})),t.rejection=M||et(t)?2:1,e.error))throw e.value}))},et=function(t){return 1!==t.rejection&&!t.parent},rt=function(t){S.call(s,(function(){var e=t.facade;M?$.emit("rejectionHandled",e):Z("rejectionhandled",e,t.value)}))},nt=function(t,e,r){return function(n){t(e,n,r)}},ot=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,Q(t,!0))},it=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw D("Promise can't be resolved itself");var n=J(e);n?j((function(){var r={done:!1};try{n.call(e,nt(it,r,t),nt(ot,r,t))}catch(e){ot(r,e,t)}})):(t.value=e,t.state=1,Q(t,!1))}catch(e){ot({done:!1},e,t)}}};V&&(W=function(t){y(this,W,N),x(t),n.call(this);var e=q(this);try{t(nt(it,e),nt(ot,e))}catch(t){ot(e,t)}},(n=function(t){L(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=v(W.prototype,{then:function(t,e){var r=U(this),n=B(w(this,W));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=M?$.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&Q(r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=q(t);this.promise=t,this.resolve=nt(it,e),this.reject=nt(ot,e)},P.f=B=function(t){return t===W||t===i?new o(t):K(t)},u||"function"!=typeof l||(c=l.prototype.then,p(l.prototype,"then",(function(t,e){var r=this;return new W((function(t,e){c.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof z&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return T(W,z.apply(s,arguments))}}))),a({global:!0,wrap:!0,forced:V},{Promise:W}),h(W,N,!1,!0),d(N),i=f(N),a({target:N,stat:!0,forced:V},{reject:function(t){var e=B(this);return e.reject.call(void 0,t),e.promise}}),a({target:N,stat:!0,forced:u||V},{resolve:function(t){return T(u&&this===i?W:this,t)}}),a({target:N,stat:!0,forced:X},{all:function(t){var e=this,r=B(e),n=r.resolve,o=r.reject,i=R((function(){var r=x(e.resolve),i=[],c=0,a=1;b(t,(function(t){var u=c++,s=!1;i.push(void 0),a++,r.call(e,t).then((function(t){s||(s=!0,i[u]=t,--a||n(i))}),o)})),--a||n(i)}));return i.error&&o(i.value),r.promise},race:function(t){var e=this,r=B(e),n=r.reject,o=R((function(){var o=x(e.resolve);b(t,(function(t){o.call(e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},4916:(t,e,r)=>{"use strict";var n=r(2109),o=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},4723:(t,e,r)=>{"use strict";var n=r(7007),o=r(9670),i=r(7466),c=r(4488),a=r(1530),u=r(7651);n("match",1,(function(t,e,r){return[function(e){var r=c(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var c=o(t),s=String(this);if(!c.global)return u(c,s);var f=c.unicode;c.lastIndex=0;for(var l,p=[],v=0;null!==(l=u(c,s));){var h=String(l[0]);p[v]=h,""===h&&(c.lastIndex=a(s,i(c.lastIndex),f)),v++}return 0===v?null:p}]}))},6755:(t,e,r)=>{"use strict";var n,o=r(2109),i=r(1236).f,c=r(7466),a=r(3929),u=r(4488),s=r(4964),f=r(1913),l="".startsWith,p=Math.min,v=s("startsWith");o({target:"String",proto:!0,forced:!(!f&&!v&&(n=i(String.prototype,"startsWith"),n&&!n.writable)||v)},{startsWith:function(t){var e=String(u(this));a(t);var r=c(p(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return l?l.call(e,n,r):e.slice(r,r+n.length)===n}})}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";r(7042),r(6755),r(4916),r(4723),r(1539),r(8674),self.addEventListener("install",(function(t){t.waitUntil(caches.open("v1").then((function(t){return t.addAll(["./","./index.html","./main.css","./main.js","./paragraph-bg.png","./favicon.ico"])})))})),self.addEventListener("activate",(function(){console.log("Активирован")})),self.addEventListener("fetch",(function(t){var e=t.request.url.slice(location.origin.length);console.log(e),console.log("Происходит запрос на сервер"),e.startsWith("/node_modules")&&(console.log("Происходит запрос за картинкой"),t.respondWith(caches.match(t.request).then((function(e){return e||fetch(t.request).then((function(e){return caches.open("my-mega-cache").then((function(r){return r.put(t.request,e.clone()),e}))}))})))),e.startsWith("/images/user")?t.respondWith(caches.match(t.request).then((function(e){return e||fetch(t.request).then((function(e){return caches.open("my-mega-cache").then((function(r){return r.put(t.request,e.clone()),e}))})).catch((function(){return console.log("catch!!!"),caches.match("./images/fallback/user.jpg")}))}))):(console.log("Поведение по умолчанию"),t.respondWith(fetch(t.request).then((function(e){return caches.open("v1").then((function(r){return r.put(t.request,e.clone()),e}))})).catch((function(){return caches.match(t.request)}))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,