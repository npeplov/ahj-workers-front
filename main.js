(()=>{var t={4204:()=>{},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},5787:t=>{t.exports=function(t,r,e){if(!(t instanceof r))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return t}},9670:(t,r,e)=>{var n=e(111);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},8533:(t,r,e)=>{"use strict";var n=e(2092).forEach,o=e(9341)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},1318:(t,r,e)=>{var n=e(5656),o=e(7466),i=e(1400),a=function(t){return function(r,e,a){var c,u=n(r),s=o(u.length),f=i(a,s);if(t&&e!=e){for(;s>f;)if((c=u[f++])!=c)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===e)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,r,e)=>{var n=e(9974),o=e(8361),i=e(7908),a=e(7466),c=e(5417),u=[].push,s=function(t){var r=1==t,e=2==t,s=3==t,f=4==t,l=6==t,p=7==t,h=5==t||l;return function(v,y,d,g){for(var m,w,b=i(v),x=o(b),S=n(y,d,3),j=a(x.length),O=0,E=g||c,L=r?E(v,j):e||p?E(v,0):void 0;j>O;O++)if((h||O in x)&&(w=S(m=x[O],O,b),t))if(r)L[O]=w;else if(w)switch(t){case 3:return!0;case 5:return m;case 6:return O;case 2:u.call(L,m)}else switch(t){case 4:return!1;case 7:u.call(L,m)}return l?-1:s||f?f:L}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterOut:s(7)}},1194:(t,r,e)=>{var n=e(7293),o=e(5112),i=e(7392),a=o("species");t.exports=function(t){return i>=51||!n((function(){var r=[];return(r.constructor={})[a]=function(){return{foo:1}},1!==r[t](Boolean).foo}))}},9341:(t,r,e)=>{"use strict";var n=e(7293);t.exports=function(t,r){var e=[][t];return!!e&&n((function(){e.call(null,r||function(){throw 1},1)}))}},5417:(t,r,e)=>{var n=e(111),o=e(3157),i=e(5112)("species");t.exports=function(t,r){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?n(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===r?0:r)}},7072:(t,r,e)=>{var n=e(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var e=!1;try{var i={};i[n]=function(){return{next:function(){return{done:e=!0}}}},t(i)}catch(t){}return e}},4326:t=>{var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},648:(t,r,e)=>{var n=e(1694),o=e(4326),i=e(5112)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=n?o:function(t){var r,e,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,r){try{return t[r]}catch(t){}}(r=Object(t),i))?e:a?o(r):"Object"==(n=o(r))&&"function"==typeof r.callee?"Arguments":n}},9920:(t,r,e)=>{var n=e(6656),o=e(3887),i=e(1236),a=e(3070);t.exports=function(t,r){for(var e=o(r),c=a.f,u=i.f,s=0;s<e.length;s++){var f=e[s];n(t,f)||c(t,f,u(r,f))}}},8880:(t,r,e)=>{var n=e(9781),o=e(3070),i=e(9114);t.exports=n?function(t,r,e){return o.f(t,r,i(1,e))}:function(t,r,e){return t[r]=e,t}},9114:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},6135:(t,r,e)=>{"use strict";var n=e(7593),o=e(3070),i=e(9114);t.exports=function(t,r,e){var a=n(r);a in t?o.f(t,a,i(0,e)):t[a]=e}},7235:(t,r,e)=>{var n=e(857),o=e(6656),i=e(6061),a=e(3070).f;t.exports=function(t){var r=n.Symbol||(n.Symbol={});o(r,t)||a(r,t,{value:i.f(t)})}},9781:(t,r,e)=>{var n=e(7293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,r,e)=>{var n=e(7854),o=e(111),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},6833:(t,r,e)=>{var n=e(8113);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(n)},5268:(t,r,e)=>{var n=e(4326),o=e(7854);t.exports="process"==n(o.process)},1036:(t,r,e)=>{var n=e(8113);t.exports=/web0s(?!.*chrome)/i.test(n)},8113:(t,r,e)=>{var n=e(5005);t.exports=n("navigator","userAgent")||""},7392:(t,r,e)=>{var n,o,i=e(7854),a=e(8113),c=i.process,u=c&&c.versions,s=u&&u.v8;s?o=(n=s.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=n[1]),t.exports=o&&+o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,r,e)=>{var n=e(7854),o=e(1236).f,i=e(8880),a=e(1320),c=e(3505),u=e(9920),s=e(4705);t.exports=function(t,r){var e,f,l,p,h,v=t.target,y=t.global,d=t.stat;if(e=y?n:d?n[v]||c(v,{}):(n[v]||{}).prototype)for(f in r){if(p=r[f],l=t.noTargetGet?(h=o(e,f))&&h.value:e[f],!s(y?f:v+(d?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),a(e,f,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},9974:(t,r,e)=>{var n=e(3099);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 0:return function(){return t.call(r)};case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},5005:(t,r,e)=>{var n=e(857),o=e(7854),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,r){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][r]||o[t]&&o[t][r]}},1246:(t,r,e)=>{var n=e(648),o=e(7497),i=e(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},7854:(t,r,e)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e.g&&e.g)||function(){return this}()||Function("return this")()},6656:t=>{var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},3501:t=>{t.exports={}},842:(t,r,e)=>{var n=e(7854);t.exports=function(t,r){var e=n.console;e&&e.error&&(1===arguments.length?e.error(t):e.error(t,r))}},490:(t,r,e)=>{var n=e(5005);t.exports=n("document","documentElement")},4664:(t,r,e)=>{var n=e(9781),o=e(7293),i=e(317);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,r,e)=>{var n=e(7293),o=e(4326),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},2788:(t,r,e)=>{var n=e(5465),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},9909:(t,r,e)=>{var n,o,i,a=e(8536),c=e(7854),u=e(111),s=e(8880),f=e(6656),l=e(5465),p=e(6200),h=e(3501),v=c.WeakMap;if(a){var y=l.state||(l.state=new v),d=y.get,g=y.has,m=y.set;n=function(t,r){return r.facade=t,m.call(y,t,r),r},o=function(t){return d.call(y,t)||{}},i=function(t){return g.call(y,t)}}else{var w=p("state");h[w]=!0,n=function(t,r){return r.facade=t,s(t,w,r),r},o=function(t){return f(t,w)?t[w]:{}},i=function(t){return f(t,w)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(r){var e;if(!u(r)||(e=o(r)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},7659:(t,r,e)=>{var n=e(5112),o=e(7497),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},3157:(t,r,e)=>{var n=e(4326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4705:(t,r,e)=>{var n=e(7293),o=/#|\.prototype\./,i=function(t,r){var e=c[a(t)];return e==s||e!=u&&("function"==typeof r?n(r):!!r)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},408:(t,r,e)=>{var n=e(9670),o=e(7659),i=e(7466),a=e(9974),c=e(1246),u=e(9212),s=function(t,r){this.stopped=t,this.result=r};t.exports=function(t,r,e){var f,l,p,h,v,y,d,g=e&&e.that,m=!(!e||!e.AS_ENTRIES),w=!(!e||!e.IS_ITERATOR),b=!(!e||!e.INTERRUPTED),x=a(r,g,1+m+b),S=function(t){return f&&u(f),new s(!0,t)},j=function(t){return m?(n(t),b?x(t[0],t[1],S):x(t[0],t[1])):b?x(t,S):x(t)};if(w)f=t;else{if("function"!=typeof(l=c(t)))throw TypeError("Target is not iterable");if(o(l)){for(p=0,h=i(t.length);h>p;p++)if((v=j(t[p]))&&v instanceof s)return v;return new s(!1)}f=l.call(t)}for(y=f.next;!(d=y.call(f)).done;){try{v=j(d.value)}catch(t){throw u(f),t}if("object"==typeof v&&v&&v instanceof s)return v}return new s(!1)}},9212:(t,r,e)=>{var n=e(9670);t.exports=function(t){var r=t.return;if(void 0!==r)return n(r.call(t)).value}},7497:t=>{t.exports={}},5948:(t,r,e)=>{var n,o,i,a,c,u,s,f,l=e(7854),p=e(1236).f,h=e(261).set,v=e(6833),y=e(1036),d=e(5268),g=l.MutationObserver||l.WebKitMutationObserver,m=l.document,w=l.process,b=l.Promise,x=p(l,"queueMicrotask"),S=x&&x.value;S||(n=function(){var t,r;for(d&&(t=w.domain)&&t.exit();o;){r=o.fn,o=o.next;try{r()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},v||d||y||!g||!m?b&&b.resolve?(s=b.resolve(void 0),f=s.then,a=function(){f.call(s,n)}):a=d?function(){w.nextTick(n)}:function(){h.call(l,n)}:(c=!0,u=m.createTextNode(""),new g(n).observe(u,{characterData:!0}),a=function(){u.data=c=!c})),t.exports=S||function(t){var r={fn:t,next:void 0};i&&(i.next=r),o||(o=r,a()),i=r}},3366:(t,r,e)=>{var n=e(7854);t.exports=n.Promise},133:(t,r,e)=>{var n=e(5268),o=e(7392),i=e(7293);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(n?38===o:o>37&&o<41)}))},8536:(t,r,e)=>{var n=e(7854),o=e(2788),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},8523:(t,r,e)=>{"use strict";var n=e(3099),o=function(t){var r,e;this.promise=new t((function(t,n){if(void 0!==r||void 0!==e)throw TypeError("Bad Promise constructor");r=t,e=n})),this.resolve=n(r),this.reject=n(e)};t.exports.f=function(t){return new o(t)}},30:(t,r,e)=>{var n,o=e(9670),i=e(6048),a=e(748),c=e(3501),u=e(490),s=e(317),f=e(6200)("IE_PROTO"),l=function(){},p=function(t){return"<script>"+t+"<\/script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,r;h=n?function(t){t.write(p("")),t.close();var r=t.parentWindow.Object;return t=null,r}(n):((r=s("iframe")).style.display="none",u.appendChild(r),r.src=String("javascript:"),(t=r.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var e=a.length;e--;)delete h.prototype[a[e]];return h()};c[f]=!0,t.exports=Object.create||function(t,r){var e;return null!==t?(l.prototype=o(t),e=new l,l.prototype=null,e[f]=t):e=h(),void 0===r?e:i(e,r)}},6048:(t,r,e)=>{var n=e(9781),o=e(3070),i=e(9670),a=e(1956);t.exports=n?Object.defineProperties:function(t,r){i(t);for(var e,n=a(r),c=n.length,u=0;c>u;)o.f(t,e=n[u++],r[e]);return t}},3070:(t,r,e)=>{var n=e(9781),o=e(4664),i=e(9670),a=e(7593),c=Object.defineProperty;r.f=n?c:function(t,r,e){if(i(t),r=a(r,!0),i(e),o)try{return c(t,r,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[r]=e.value),t}},1236:(t,r,e)=>{var n=e(9781),o=e(5296),i=e(9114),a=e(5656),c=e(7593),u=e(6656),s=e(4664),f=Object.getOwnPropertyDescriptor;r.f=n?f:function(t,r){if(t=a(t),r=c(r,!0),s)try{return f(t,r)}catch(t){}if(u(t,r))return i(!o.f.call(t,r),t[r])}},1156:(t,r,e)=>{var n=e(5656),o=e(8006).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(n(t))}},8006:(t,r,e)=>{var n=e(6324),o=e(748).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},5181:(t,r)=>{r.f=Object.getOwnPropertySymbols},6324:(t,r,e)=>{var n=e(6656),o=e(5656),i=e(1318).indexOf,a=e(3501);t.exports=function(t,r){var e,c=o(t),u=0,s=[];for(e in c)!n(a,e)&&n(c,e)&&s.push(e);for(;r.length>u;)n(c,e=r[u++])&&(~i(s,e)||s.push(e));return s}},1956:(t,r,e)=>{var n=e(6324),o=e(748);t.exports=Object.keys||function(t){return n(t,o)}},5296:(t,r)=>{"use strict";var e={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!e.call({1:2},1);r.f=o?function(t){var r=n(this,t);return!!r&&r.enumerable}:e},288:(t,r,e)=>{"use strict";var n=e(1694),o=e(648);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},3887:(t,r,e)=>{var n=e(5005),o=e(8006),i=e(5181),a=e(9670);t.exports=n("Reflect","ownKeys")||function(t){var r=o.f(a(t)),e=i.f;return e?r.concat(e(t)):r}},857:(t,r,e)=>{var n=e(7854);t.exports=n},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,r,e)=>{var n=e(9670),o=e(111),i=e(8523);t.exports=function(t,r){if(n(t),o(r)&&r.constructor===t)return r;var e=i.f(t);return(0,e.resolve)(r),e.promise}},2248:(t,r,e)=>{var n=e(1320);t.exports=function(t,r,e){for(var o in r)n(t,o,r[o],e);return t}},1320:(t,r,e)=>{var n=e(7854),o=e(8880),i=e(6656),a=e(3505),c=e(2788),u=e(9909),s=u.get,f=u.enforce,l=String(String).split("String");(t.exports=function(t,r,e,c){var u,s=!!c&&!!c.unsafe,p=!!c&&!!c.enumerable,h=!!c&&!!c.noTargetGet;"function"==typeof e&&("string"!=typeof r||i(e,"name")||o(e,"name",r),(u=f(e)).source||(u.source=l.join("string"==typeof r?r:""))),t!==n?(s?!h&&t[r]&&(p=!0):delete t[r],p?t[r]=e:o(t,r,e)):p?t[r]=e:a(r,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,r,e)=>{var n=e(7854),o=e(8880);t.exports=function(t,r){try{o(n,t,r)}catch(e){n[t]=r}return r}},6340:(t,r,e)=>{"use strict";var n=e(5005),o=e(3070),i=e(5112),a=e(9781),c=i("species");t.exports=function(t){var r=n(t),e=o.f;a&&r&&!r[c]&&e(r,c,{configurable:!0,get:function(){return this}})}},8003:(t,r,e)=>{var n=e(3070).f,o=e(6656),i=e(5112)("toStringTag");t.exports=function(t,r,e){t&&!o(t=e?t:t.prototype,i)&&n(t,i,{configurable:!0,value:r})}},6200:(t,r,e)=>{var n=e(2309),o=e(9711),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,r,e)=>{var n=e(7854),o=e(3505),i="__core-js_shared__",a=n[i]||o(i,{});t.exports=a},2309:(t,r,e)=>{var n=e(1913),o=e(5465);(t.exports=function(t,r){return o[t]||(o[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.10.1",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,r,e)=>{var n=e(9670),o=e(3099),i=e(5112)("species");t.exports=function(t,r){var e,a=n(t).constructor;return void 0===a||null==(e=n(a)[i])?r:o(e)}},261:(t,r,e)=>{var n,o,i,a=e(7854),c=e(7293),u=e(9974),s=e(490),f=e(317),l=e(6833),p=e(5268),h=a.location,v=a.setImmediate,y=a.clearImmediate,d=a.process,g=a.MessageChannel,m=a.Dispatch,w=0,b={},x=function(t){if(b.hasOwnProperty(t)){var r=b[t];delete b[t],r()}},S=function(t){return function(){x(t)}},j=function(t){x(t.data)},O=function(t){a.postMessage(t+"",h.protocol+"//"+h.host)};v&&y||(v=function(t){for(var r=[],e=1;arguments.length>e;)r.push(arguments[e++]);return b[++w]=function(){("function"==typeof t?t:Function(t)).apply(void 0,r)},n(w),w},y=function(t){delete b[t]},p?n=function(t){d.nextTick(S(t))}:m&&m.now?n=function(t){m.now(S(t))}:g&&!l?(i=(o=new g).port2,o.port1.onmessage=j,n=u(i.postMessage,i,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&h&&"file:"!==h.protocol&&!c(O)?(n=O,a.addEventListener("message",j,!1)):n="onreadystatechange"in f("script")?function(t){s.appendChild(f("script")).onreadystatechange=function(){s.removeChild(this),x(t)}}:function(t){setTimeout(S(t),0)}),t.exports={set:v,clear:y}},1400:(t,r,e)=>{var n=e(9958),o=Math.max,i=Math.min;t.exports=function(t,r){var e=n(t);return e<0?o(e+r,0):i(e,r)}},5656:(t,r,e)=>{var n=e(8361),o=e(4488);t.exports=function(t){return n(o(t))}},9958:t=>{var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},7466:(t,r,e)=>{var n=e(9958),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},7908:(t,r,e)=>{var n=e(4488);t.exports=function(t){return Object(n(t))}},7593:(t,r,e)=>{var n=e(111);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},1694:(t,r,e)=>{var n={};n[e(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},9711:t=>{var r=0,e=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+e).toString(36)}},3307:(t,r,e)=>{var n=e(133);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,r,e)=>{var n=e(5112);r.f=n},5112:(t,r,e)=>{var n=e(7854),o=e(2309),i=e(6656),a=e(9711),c=e(133),u=e(3307),s=o("wks"),f=n.Symbol,l=u?f:f&&f.withoutSetter||a;t.exports=function(t){return i(s,t)&&(c||"string"==typeof s[t])||(c&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},2222:(t,r,e)=>{"use strict";var n=e(2109),o=e(7293),i=e(3157),a=e(111),c=e(7908),u=e(7466),s=e(6135),f=e(5417),l=e(1194),p=e(5112),h=e(7392),v=p("isConcatSpreadable"),y=9007199254740991,d="Maximum allowed index exceeded",g=h>=51||!o((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),m=l("concat"),w=function(t){if(!a(t))return!1;var r=t[v];return void 0!==r?!!r:i(t)};n({target:"Array",proto:!0,forced:!g||!m},{concat:function(t){var r,e,n,o,i,a=c(this),l=f(a,0),p=0;for(r=-1,n=arguments.length;r<n;r++)if(w(i=-1===r?a:arguments[r])){if(p+(o=u(i.length))>y)throw TypeError(d);for(e=0;e<o;e++,p++)e in i&&s(l,p,i[e])}else{if(p>=y)throw TypeError(d);s(l,p++,i)}return l.length=p,l}})},1539:(t,r,e)=>{var n=e(1694),o=e(1320),i=e(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},8674:(t,r,e)=>{"use strict";var n,o,i,a,c=e(2109),u=e(1913),s=e(7854),f=e(5005),l=e(3366),p=e(1320),h=e(2248),v=e(8003),y=e(6340),d=e(111),g=e(3099),m=e(5787),w=e(2788),b=e(408),x=e(7072),S=e(6707),j=e(261).set,O=e(5948),E=e(9478),L=e(842),T=e(8523),P=e(2534),k=e(9909),M=e(4705),N=e(5112),A=e(5268),_=e(7392),F=N("species"),R="Promise",C=k.get,I=k.set,G=k.getterFor(R),D=l,H=s.TypeError,W=s.document,q=s.process,V=f("fetch"),z=T.f,$=z,B=!!(W&&W.createEvent&&s.dispatchEvent),U="function"==typeof PromiseRejectionEvent,X="unhandledrejection",Y=M(R,(function(){if(w(D)===String(D)){if(66===_)return!0;if(!A&&!U)return!0}if(u&&!D.prototype.finally)return!0;if(_>=51&&/native code/.test(D))return!1;var t=D.resolve(1),r=function(t){t((function(){}),(function(){}))};return(t.constructor={})[F]=r,!(t.then((function(){}))instanceof r)})),J=Y||!x((function(t){D.all(t).catch((function(){}))})),K=function(t){var r;return!(!d(t)||"function"!=typeof(r=t.then))&&r},Q=function(t,r){if(!t.notified){t.notified=!0;var e=t.reactions;O((function(){for(var n=t.value,o=1==t.state,i=0;e.length>i;){var a,c,u,s=e[i++],f=o?s.ok:s.fail,l=s.resolve,p=s.reject,h=s.domain;try{f?(o||(2===t.rejection&&et(t),t.rejection=1),!0===f?a=n:(h&&h.enter(),a=f(n),h&&(h.exit(),u=!0)),a===s.promise?p(H("Promise-chain cycle")):(c=K(a))?c.call(a,l,p):l(a)):p(n)}catch(t){h&&!u&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,r&&!t.rejection&&tt(t)}))}},Z=function(t,r,e){var n,o;B?((n=W.createEvent("Event")).promise=r,n.reason=e,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:r,reason:e},!U&&(o=s["on"+t])?o(n):t===X&&L("Unhandled promise rejection",e)},tt=function(t){j.call(s,(function(){var r,e=t.facade,n=t.value;if(rt(t)&&(r=P((function(){A?q.emit("unhandledRejection",n,e):Z(X,e,n)})),t.rejection=A||rt(t)?2:1,r.error))throw r.value}))},rt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){j.call(s,(function(){var r=t.facade;A?q.emit("rejectionHandled",r):Z("rejectionhandled",r,t.value)}))},nt=function(t,r,e){return function(n){t(r,n,e)}},ot=function(t,r,e){t.done||(t.done=!0,e&&(t=e),t.value=r,t.state=2,Q(t,!0))},it=function(t,r,e){if(!t.done){t.done=!0,e&&(t=e);try{if(t.facade===r)throw H("Promise can't be resolved itself");var n=K(r);n?O((function(){var e={done:!1};try{n.call(r,nt(it,e,t),nt(ot,e,t))}catch(r){ot(e,r,t)}})):(t.value=r,t.state=1,Q(t,!1))}catch(r){ot({done:!1},r,t)}}};Y&&(D=function(t){m(this,D,R),g(t),n.call(this);var r=C(this);try{t(nt(it,r),nt(ot,r))}catch(t){ot(r,t)}},(n=function(t){I(this,{type:R,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(D.prototype,{then:function(t,r){var e=G(this),n=z(S(this,D));return n.ok="function"!=typeof t||t,n.fail="function"==typeof r&&r,n.domain=A?q.domain:void 0,e.parent=!0,e.reactions.push(n),0!=e.state&&Q(e,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,r=C(t);this.promise=t,this.resolve=nt(it,r),this.reject=nt(ot,r)},T.f=z=function(t){return t===D||t===i?new o(t):$(t)},u||"function"!=typeof l||(a=l.prototype.then,p(l.prototype,"then",(function(t,r){var e=this;return new D((function(t,r){a.call(e,t,r)})).then(t,r)}),{unsafe:!0}),"function"==typeof V&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return E(D,V.apply(s,arguments))}}))),c({global:!0,wrap:!0,forced:Y},{Promise:D}),v(D,R,!1,!0),y(R),i=f(R),c({target:R,stat:!0,forced:Y},{reject:function(t){var r=z(this);return r.reject.call(void 0,t),r.promise}}),c({target:R,stat:!0,forced:u||Y},{resolve:function(t){return E(u&&this===i?D:this,t)}}),c({target:R,stat:!0,forced:J},{all:function(t){var r=this,e=z(r),n=e.resolve,o=e.reject,i=P((function(){var e=g(r.resolve),i=[],a=0,c=1;b(t,(function(t){var u=a++,s=!1;i.push(void 0),c++,e.call(r,t).then((function(t){s||(s=!0,i[u]=t,--c||n(i))}),o)})),--c||n(i)}));return i.error&&o(i.value),e.promise},race:function(t){var r=this,e=z(r),n=e.reject,o=P((function(){var o=g(r.resolve);b(t,(function(t){o.call(r,t).then(e.resolve,n)}))}));return o.error&&n(o.value),e.promise}})},1817:(t,r,e)=>{"use strict";var n=e(2109),o=e(9781),i=e(7854),a=e(6656),c=e(111),u=e(3070).f,s=e(9920),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),r=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[r]=!0),r};s(p,f);var h=p.prototype=f.prototype;h.constructor=p;var v=h.toString,y="Symbol(test)"==String(f("test")),d=/^Symbol\((.*)\)[^)]+$/;u(h,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,r=v.call(t);if(a(l,t))return"";var e=y?r.slice(7,-1):r.replace(d,"$1");return""===e?void 0:e}}),n({global:!0,forced:!0},{Symbol:p})}},2526:(t,r,e)=>{"use strict";var n=e(2109),o=e(7854),i=e(5005),a=e(1913),c=e(9781),u=e(133),s=e(3307),f=e(7293),l=e(6656),p=e(3157),h=e(111),v=e(9670),y=e(7908),d=e(5656),g=e(7593),m=e(9114),w=e(30),b=e(1956),x=e(8006),S=e(1156),j=e(5181),O=e(1236),E=e(3070),L=e(5296),T=e(8880),P=e(1320),k=e(2309),M=e(6200),N=e(3501),A=e(9711),_=e(5112),F=e(6061),R=e(7235),C=e(8003),I=e(9909),G=e(2092).forEach,D=M("hidden"),H="Symbol",W=_("toPrimitive"),q=I.set,V=I.getterFor(H),z=Object.prototype,$=o.Symbol,B=i("JSON","stringify"),U=O.f,X=E.f,Y=S.f,J=L.f,K=k("symbols"),Q=k("op-symbols"),Z=k("string-to-symbol-registry"),tt=k("symbol-to-string-registry"),rt=k("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,ot=c&&f((function(){return 7!=w(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?function(t,r,e){var n=U(z,r);n&&delete z[r],X(t,r,e),n&&t!==z&&X(z,r,n)}:X,it=function(t,r){var e=K[t]=w($.prototype);return q(e,{type:H,tag:t,description:r}),c||(e.description=r),e},at=s?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof $},ct=function(t,r,e){t===z&&ct(Q,r,e),v(t);var n=g(r,!0);return v(e),l(K,n)?(e.enumerable?(l(t,D)&&t[D][n]&&(t[D][n]=!1),e=w(e,{enumerable:m(0,!1)})):(l(t,D)||X(t,D,m(1,{})),t[D][n]=!0),ot(t,n,e)):X(t,n,e)},ut=function(t,r){v(t);var e=d(r),n=b(e).concat(pt(e));return G(n,(function(r){c&&!st.call(e,r)||ct(t,r,e[r])})),t},st=function(t){var r=g(t,!0),e=J.call(this,r);return!(this===z&&l(K,r)&&!l(Q,r))&&(!(e||!l(this,r)||!l(K,r)||l(this,D)&&this[D][r])||e)},ft=function(t,r){var e=d(t),n=g(r,!0);if(e!==z||!l(K,n)||l(Q,n)){var o=U(e,n);return!o||!l(K,n)||l(e,D)&&e[D][n]||(o.enumerable=!0),o}},lt=function(t){var r=Y(d(t)),e=[];return G(r,(function(t){l(K,t)||l(N,t)||e.push(t)})),e},pt=function(t){var r=t===z,e=Y(r?Q:d(t)),n=[];return G(e,(function(t){!l(K,t)||r&&!l(z,t)||n.push(K[t])})),n};u||(P(($=function(){if(this instanceof $)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,r=A(t),e=function(t){this===z&&e.call(Q,t),l(this,D)&&l(this[D],r)&&(this[D][r]=!1),ot(this,r,m(1,t))};return c&&nt&&ot(z,r,{configurable:!0,set:e}),it(r,t)}).prototype,"toString",(function(){return V(this).tag})),P($,"withoutSetter",(function(t){return it(A(t),t)})),L.f=st,E.f=ct,O.f=ft,x.f=S.f=lt,j.f=pt,F.f=function(t){return it(_(t),t)},c&&(X($.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),a||P(z,"propertyIsEnumerable",st,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:$}),G(b(rt),(function(t){R(t)})),n({target:H,stat:!0,forced:!u},{for:function(t){var r=String(t);if(l(Z,r))return Z[r];var e=$(r);return Z[r]=e,tt[e]=r,e},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(l(tt,t))return tt[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!c},{create:function(t,r){return void 0===r?w(t):ut(w(t),r)},defineProperty:ct,defineProperties:ut,getOwnPropertyDescriptor:ft}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:lt,getOwnPropertySymbols:pt}),n({target:"Object",stat:!0,forced:f((function(){j.f(1)}))},{getOwnPropertySymbols:function(t){return j.f(y(t))}}),B&&n({target:"JSON",stat:!0,forced:!u||f((function(){var t=$();return"[null]"!=B([t])||"{}"!=B({a:t})||"{}"!=B(Object(t))}))},{stringify:function(t,r,e){for(var n,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(n=r,(h(r)||void 0!==t)&&!at(t))return p(r)||(r=function(t,r){if("function"==typeof n&&(r=n.call(this,t,r)),!at(r))return r}),o[1]=r,B.apply(null,o)}}),$.prototype[W]||T($.prototype,W,$.prototype.valueOf),C($,H),N[D]=!0},4747:(t,r,e)=>{var n=e(7854),o=e(8324),i=e(8533),a=e(8880);for(var c in o){var u=n[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(t){s.forEach=i}}},5666:t=>{var r=function(t){"use strict";var r,e=Object.prototype,n=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{u({},"")}catch(t){u=function(t,r,e){return t[r]=e}}function s(t,r,e,n){var o=r&&r.prototype instanceof d?r:d,i=Object.create(o.prototype),a=new P(n||[]);return i._invoke=function(t,r,e){var n=l;return function(o,i){if(n===h)throw new Error("Generator is already running");if(n===v){if("throw"===o)throw i;return M()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=E(a,e);if(c){if(c===y)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(n===l)throw n=v,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n=h;var u=f(t,r,e);if("normal"===u.type){if(n=e.done?v:p,u.arg===y)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n=v,e.method="throw",e.arg=u.arg)}}}(t,e,a),i}function f(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",p="suspendedYield",h="executing",v="completed",y={};function d(){}function g(){}function m(){}var w={};w[i]=function(){return this};var b=Object.getPrototypeOf,x=b&&b(b(k([])));x&&x!==e&&n.call(x,i)&&(w=x);var S=m.prototype=d.prototype=Object.create(w);function j(t){["next","throw","return"].forEach((function(r){u(t,r,(function(t){return this._invoke(r,t)}))}))}function O(t,r){function e(o,i,a,c){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&n.call(l,"__await")?r.resolve(l.__await).then((function(t){e("next",t,a,c)}),(function(t){e("throw",t,a,c)})):r.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return e("throw",t,a,c)}))}c(u.arg)}var o;this._invoke=function(t,n){function i(){return new r((function(r,o){e(t,n,r,o)}))}return o=o?o.then(i,i):i()}}function E(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,E(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=f(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,y;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function L(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function T(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0)}function k(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(n.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:M}}function M(){return{value:r,done:!0}}return g.prototype=S.constructor=m,m.constructor=g,g.displayName=u(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===g||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},j(O.prototype),O.prototype[a]=function(){return this},t.AsyncIterator=O,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new O(s(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},j(S),u(S,c,"Generator"),S[i]=function(){return this},S.toString=function(){return"[object Generator]"},t.keys=function(t){var r=[];for(var e in t)r.push(e);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=k,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(T),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(n,o){return c.type="throw",c.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),y},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),T(e),y}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;T(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:k(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),y}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},7436:(t,r,e)=>{"use strict";t.exports=e.p+"./favicon.ico"},5850:(t,r,e)=>{"use strict";t.exports=e.p+"./paragraph-bg.png"}},r={};function e(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return t[n](i,i.exports,e),i.exports}e.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},e.d=(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var n=r.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),(()=>{"use strict";e(5666),e(4747),e(1539),e(8674),e(2526),e(1817);var t=e(4204),r=e.n(t);function n(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o)}function o(t){return function(){var r=this,e=arguments;return new Promise((function(o,i){var a=t.apply(r,e);function c(t){n(a,o,i,c,u,"next",t)}function u(t){n(a,o,i,c,u,"throw",t)}c(void 0)}))}}function i(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=function(){function t(r){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.gui=r,this.url="https://npeplov-ahj-workers.herokuapp.com/"}var e,n,a,c;return e=t,(n=[{key:"init",value:function(){this.showMain(),this.sendXHR(),this.listenServiceWorker()}},{key:"sendXHR",value:(c=o(regeneratorRuntime.mark((function t(){var r,e,n=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.gui.getDOM(),this.gui.containers.forEach((function(t){return t.classList.add("stub")})),t.next=4,fetch(this.url);case 4:return r=t.sent,t.next=7,r.json();case 7:e=t.sent,this.gui.containers.forEach((function(t){return t.classList.remove("stub")})),this.gui.main.innerHTML="",e.forEach((function(t){n.gui.main.innerHTML+=n.gui.articleTemplate(t.title,t.description,'<img src="'.concat(t.image,'">'))}));case 11:case"end":return t.stop()}}),t,this)}))),function(){return c.apply(this,arguments)})},{key:"listenServiceWorker",value:function(){"serviceWorker"in navigator&&navigator.serviceWorker.register("./service.worker.js",{scope:"./"}).then((function(t){console.log("Registration succeeded. Scope is ".concat(t.scope))})).catch((function(t){console.log("Registration failed with ".concat(t))}))}},{key:"showFile",value:(a=o(regeneratorRuntime.mark((function t(e){var n,o,i,a=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.target.files[0],t.next=3,this.readFile(n);case 3:o=t.sent,(i=new(r())).addEventListener("message",(function(t){var r=t.data;a.gui.result.textContent=r.length,console.log(r),i.terminate()})),i.postMessage(o);case 7:case"end":return t.stop()}}),t,this)}))),function(t){return a.apply(this,arguments)})},{key:"readFile",value:function(t){return new Promise((function(r,e){var n=new FileReader;n.addEventListener("load",(function(t){r(t.target.result)})),n.addEventListener("error",(function(t){e(t.target.error)})),n.readAsText(t)}))}},{key:"showMain",value:function(){this.gui.main.innerHTML+=this.gui.articleTemplate(),this.gui.main.innerHTML+=this.gui.articleTemplate()}},{key:"test",value:function(){!function(){for(var t=0;t<1e9;t+=1);}()}},{key:"workerMessages",value:function(){}}])&&i(e.prototype,n),t}();function c(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}e(2222),new a(new(function(){function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.widget=document.querySelector(".widget"),this.widgetContainer=this.widget.querySelector(".container"),this.main=this.widget.querySelector("main"),this.containers=null,this.containersP=null}var r,e;return r=t,(e=[{key:"articleTemplate",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:'\n  <svg width="50" heigth="50">\n    <rect x = "0" y = "0" width = "50" height = "50" fill = "#a7a7a7"/>\n  </svg>\n  ';return'\n    <div class="wrapper">\n      <h4>'.concat(t,"</h4>\n      <article>\n        ").concat(e,"\n        <p>").concat(r,"</p>\n      </article>\n    </div>\n    ")}},{key:"getDOM",value:function(){this.containers=this.main.querySelectorAll(".wrapper"),this.containersP=document.querySelectorAll(".wrapper p")}}])&&c(r.prototype,e),t}())).init(),e(7436),e(5850)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,